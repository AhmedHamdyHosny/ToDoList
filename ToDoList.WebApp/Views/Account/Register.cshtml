@model ToDoList.WebApp.Models.RegisterViewModel
@{
    ViewBag.Title = Resources.Resource.Register;
    Layout = "~/Views/Shared/_Empty.cshtml";
}

<link href="~/Content/account.css" rel="stylesheet" />

<style>
    .form-group {
        margin-bottom: 0px;
        margin-top: 15px;
    }

    .btn-create-account {
        margin-top: 15px;
    }
</style>

<div class="container">
    <div class="row">
        <div class="col-sm-6 col-md-4 col-md-offset-4">
            <h4 class="text-center login-title">@Resources.Resource.NewAccount</h4>
            <div class="account-wall">
                <p id="loginAlert" class="text-danger text-center"></p>
                @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { id = "form", @class = "form-signin", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-group input-group">
                        <span class="input-group-addon"><i class="fa fa-user"></i></span>
                        @Html.EditorFor(model => model.UserFullName, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @placeholder = Resources.Resource.UserFullName } })
                    </div>
                    @Html.ValidationMessageFor(model => model.UserFullName, "", new { @class = "text-danger", @id = "UserFullName_Validation" })

                    <div class="form-group input-group">
                        <span class="input-group-addon"><i class="fa fa-envelope"></i></span>
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @placeholder = Resources.Resource.Email } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger", @id = "Email_Validation" })

                    <div class="form-group input-group">
                        <span class="input-group-addon"><i class="fa fa-lock"></i></span>
                        @Html.PasswordFor(model => model.Password, new { @class = "form-control", @placeholder = Resources.Resource.Password })
                    </div>
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger", @id = "Password_Validation" })

                    <div class="form-group input-group">
                        <span class="input-group-addon"><i class="fa fa-lock"></i></span>
                        @Html.PasswordFor(model => model.ConfirmPassword,  new { @class = "form-control", @placeholder = Resources.Resource.ConfirmPassword })
                    </div>
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger", @id = "ConfirmPassword_Validation" })

                    <button class="btn btn-primary btn-block btn-create-account" type="submit"> @Resources.Resource.Button_CreateAccount </button>
                }
                <p class="text-center">@Resources.Resource.Lbl_HaveAccount <a href="/Account/Login">@Resources.Resource.Login</a> </p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {

            //hide loader
            hideLoading();

            $("#form").on("submit", function (event) {
                event.preventDefault();
                var valid = true;
                var model = {};
                //bind model
                model.UserFullName = $("input[name='UserFullName']").val();
                model.Email = $("input[name='Email']").val();
                model.Password = $("input[name='Password']").val();
                model.ConfirmPassword = $("input[name='ConfirmPassword']").val();

                valid = valid && $("#form").valid();
                if (valid) {
                    //show loader
                    showLoading();
                    //ajax call (Post Register)
                    $.ajax({
                        type: "POST",
                        url: "/Account/Register",
                        data: model,
                        success: function (result) {
                            //hide loader
                            hideLoading();
                            var alertType = (result.Status == 1) ? "success" : "error";
                            //show alert message
                            swal({
                                title: '',
                                text: result.Message,
                                type: alertType,
                                showCancelButton: false,
                                confirmButtonText: '@Resources.Resource.ButtonOk',
                                closeOnConfirm: false
                            }, function () {
                                //save new user to session
                                sessionStorage.setItem("username", model.Email);
                                sessionStorage.setItem("password", model.Password);
                                //redirect to index
                                window.location.href = result.RedirectTo;
                            });
                        },
                        error: function (result) {
                            //hide loader
                            hideLoading();
                            //show error message
                            swal({
                                title: '',
                                text: '@Resources.Validation.ErrorMsg_FailedOperation',
                                type: 'error',
                                showCancelButton: false,
                                confirmButtonText: '@Resources.Resource.ButtonOk',
                                closeOnConfirm: false
                            });
                        }
                    })//end ajax
                }//end form valid
                
            });//end form submit

        });
    </script>
}
